#summary Usage of the plugin

= Introduction =

We have faced the problem of building our application on our continuous integration server. It was a pain to write separate ant build scripts, because all information is already present in the eclipse environment, so nobody interested in synchronizing hundreds of eclipse projects build path settings to build scripts.

I've googled the web for such a plugin, but all have lack of functionality.

= Usage =
This plugin is an application plugin. You should invoke like this:

{{{
eclipsec -nosplash -data <workspace_dir> -application com.ind.eclipse.headlessworkspace.Application [parameters]
}}}

On Unix like systems, you need to start a fake X server, like Xvfb:

{{{
Xvfb :7 &
export DISPLAY=:7
eclipse -nosplash -data <workspace_dir> -application com.ind.eclipse.headlessworkspace.Application [parameters]
}}}

Possible parameters:
=== import === 
Imports all directory containing .project file to the workspace.
The .svn directories will be marked as 'team private'.
=== clean ===
Calls the clean build on every project.
=== build ===
Builds all projects using incremental building.
After a clean, or for the first time, a full build will be run.
_It will change the external tools builder to log output to a file. At the end, it will restore the original state._
=== exportwars ===
This will export all dynamic web projects to a war file in the workspace root directory as `<project_name>.war`
=== dumpclasspath ===
The resolved classpath entries for every java project will be dumped to the workspace root directory as `<project_name>.classpath`
=== dumpreferences ===
Dumps the project build order, listing project static and dynamic references.
=== createserver <server name> <properties file> ===
_Under construction_ <br>
Creates a server instance of <server name>.
The properties file should contain the server specific parameters. It will print out what is missing...

== How It Works ==
See the [HowItWorks How It Works] page for details.