= Introduction =

We have faced the problem of building our application on our continuous integration server. It was a pain to write separate ant build scripts, because all information is already present in the eclipse environment, so nobody interested in synchronizing hundreds of eclipse projects build path settings to build scripts.

I've googled the web for such a plugin, but all have lack of functionality.

= Usage =
This plugin is an application plugin. You should invoke like this:

{{{
eclipsec -nosplash -data <workspace_dir> -application com.ind.eclipse.headlessworkspace.Application [parameters]
}}}

On Unix like systems, you need to start a fake X server, like Xvfb:

{{{
Xvfb :7 &
export DISPLAY=:7
eclipse -nosplash -data <workspace_dir> -application com.ind.eclipse.headlessworkspace.Application [parameters]
}}}

Possible parameters:
=== import === 
Imports all directory containing .project file to the workspace.
The .svn directories will be marked as 'team private'.
=== clean ===
Calls the clean build on every project.
=== build ===
Builds all projects using incremental building.
After a clean, or for the first time, a full build will be run.
_It will change the external tools builder to log output to a file. At the end, it will restore the original state._

= How it works =

== Initial settings ==
The plugin will turn off automatic building.
It will set circular dependencies as an error.
It will set incomplete build path problems to warning only.
It will set the name of the default jre to 'JRE'. (some JST tool uses direct references to named installed JREs), so we used this name in our projects.

== Importing projects ==
This plugin can import projects into the workspace, so it can initialize a directory as a workspace. It very useful in case CI. It will checkout the projects, this plugin will import them into the workspace.

== Correcting build order ==
After importing, it will correct the build order. It is necessary because dynamic project references can be missing due to improper importing order. This is done using "touch" on a selected of resources (.project, .classpath, etc.).

== Building ==
It is now nearly ready for the build. But what about external tool builders? Ant needs the gui to be initialized. So a workbench must be initialized (in invisible mode). Another problem with and is the console. I haven't achieved to catch output on Console. So I change the external tool builders' launch configuration to log output to a file, and I poll this file instead. (At the end, the launch configs will be reverted)

So, it is now possible to call builds (clean, and workspace build). The workspace build will start a full build after a clean or after a pure import, otherwise it will start incremental (or manual) build. It is good to remember this if you wish to use external tool builders.